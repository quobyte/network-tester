## -*- mode: python; coding: utf-8 -*-

## rrul test specification

include("netperf_definitions.inc")
DESCRIPTION="Realtime Response Under Load - Best Effort, configurable no of flows"
DEFAULTS={'PLOT': "all_scaled"}

STREAMS_UP=get_test_parameter('upload_streams')
STREAMS_DOWN=get_test_parameter('download_streams')
MARKINGS=get_test_parameter("markings", default=[], split=True)

def generate_host_raw_datasets(dest=None):
    dest = dest if isinstance(dest, o) else o()
    rv = []
    for host in HOSTS:
        rv.append(('TCP {} upload BE'.format(host),
                   {'test': 'TCP_STREAM', 'length': LENGTH, 'host': host, 'marking': 'CS0',
                    'delay': DELAY, 'id': host, 'units': 'Mbits/s', 'duplicates': STREAMS_UP,
                    'runner': 'netperf_demo'}))

        rv.append(('TCP {} download BE'.format(host),
                  {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': host, 'marking': 'CS0',
                   'delay': DELAY, 'id': host, 'units': 'Mbits/s', 'duplicates': STREAMS_DOWN,
                   'runner': 'netperf_demo'}))

        rv.append(('{} Ping (ms) UDP BE'.format(host),
                  {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': host,
                   'marking': 'CS0,CS0', 'units': 'ms'}))

        rv.append(('{} Ping (ms) ICMP'.format(host),
                   { 'ip_version': IP_VERSION, 'interval': STEP_SIZE, 'length': TOTAL_LENGTH,
                     'host': host, 'units': 'ms', 'runner': 'ping'}))
    dest.update(rv)
    return dest

def generate_host_agregates(dest=None):
    dest = dest if isinstance(dest, o) else o()
    rv = []
    for host in HOSTS:
        rv.append(('{} TCP upload avg'.format(host),
                   {'apply_to': [glob("TCP {} upload BE::*".format(host))],
                    'units': 'Mbits/s',
                    'runner': 'average',}))
        rv.append(('{} TCP upload sum'.format(host),
                   {'apply_to': [glob("TCP {} upload BE::*".format(host))],
                    'units': 'Mbits/s',
                    'runner': 'sum',}))
        rv.append(('{} TCP download avg'.format(host),
                   {'apply_to': [glob("TCP {} download BE::*".format(host))],
                    'units': 'Mbits/s',
                    'runner': 'average',}))
        rv.append(('{} TCP download sum'.format(host),
                   {'apply_to': [glob("TCP {} download BE::*".format(host))],
                    'units': 'Mbits/s',
                    'runner': 'sum',}))
        rv.append(('{} TCP totals'.format(host),
                   {'apply_to': [glob("TCP {} * BE::*".format(host))],
                    'units': 'Mbits/s',
                    'runner': 'sum',}))
        rv.append(('{} Ping (ms) avg'.format(host),
                   {'apply_to': [glob("{} Ping (ms)*".format(host))],
                    'units': 'Mbits/s',
                    'runner': 'sum',}))

    dest.update(rv)
    return dest


DATA_SETS = o([
    ('TCP upload avg',
     {'apply_to': [glob("TCP * upload BE::*", exclude=["TCP upload sum foo"])],
       'units': 'Mbits/s',
       'runner': 'average',}),
    ('TCP upload sum',
     {'apply_to': [glob("TCP * upload BE::*", exclude=["TCP upload avg foo"])],
       'units': 'Mbits/s',
       'runner': 'sum',}),

    ('TCP download avg',
     {'apply_to': [glob("TCP * download BE::*", exclude=["TCP download sum foo"])],
       'units': 'Mbits/s',
       'runner': 'average',}),
    ('TCP download sum',
     {'apply_to': [glob("TCP * download BE::*", exclude=["TCP download avg foo"])],
       'units': 'Mbits/s',
       'runner': 'sum',}),
    ('TCP totals',
     {'apply_to': [glob("TCP * BE::*", exclude=["TCP download avg", "TCP download sum", "TCP upload avg", "TCP upload sum"])],
       'units': 'Mbits/s',
       'runner': 'sum',}),
    ('Ping (ms) avg',
     {'apply_to': [glob("* Ping (ms) ICMP"), glob("* Ping (ms) UDP BE")],
       'units': 'ms',
       'runner': 'average',}),
    ])


generate_host_raw_datasets(DATA_SETS)
generate_host_agregates(DATA_SETS)

def generate_host_series(glob_str, label_str=None, others=None):
    rv = []
    for host in HOSTS:
        if label_str:
            hdict = {
                'data': glob(glob_str.format(host)),
                'label': label_str.format(host)
            }
        else:
            hdict = {
                'data': glob(glob_str.format(host)),
            }
        rv.append(hdict)
    if isinstance(others, dict):
        rv.append(others)
    elif isinstance(others, list):
        rv.extend(others)
    return rv


PLOTS = o([
    ('download',
     {'description': 'Download bandwidth plot',
      'type': 'timeseries',
      'legend_title': 'TCP download',
      'series': generate_host_series(
          '{} TCP download sum',
          'Download',
          {'data': 'TCP download avg',
           'label': 'Avg',
           'smoothing': 10,
           'color': 'black',
           'linewidth': 2})
      }),

    ('download_scaled',
     {'description': 'Download bandwidth w/axes scaled to remove outliers',
      'parent': 'download',
      'scaling': (5,95)}),

    ('upload',
     {'description': 'Upload bandwidth plot',
      'type': 'timeseries',
      'legend_title': 'TCP upload',
      'series': generate_host_series(
          '{} TCP upload sum',
          'Upload',
          {'data': 'TCP upload avg',
           'label': 'Avg',
           'smoothing': 10,
           'color': 'black',
           'linewidth': 2})
      }),

    ('upload_scaled',
     {'description': 'Upload bandwidth w/axes scaled to remove outliers',
      'parent': 'upload',
      'scaling': (5,95)}),

    ('ping',
     {'description': 'Ping plot',
      'type': 'timeseries',
      'legend_title': 'Ping (ms)',
      'axis_labels': ['Latency (ms)'],
      'series': generate_host_series(
          '{} Ping (ms) UDP BE',
          'Ping (ms) UDP BE ({})',
          generate_host_series(
              '{} Ping (ms) ICMP',
              'Ping (ms) ICMP ({})',
              {'data': 'Ping (ms) avg',
               'label': 'Avg',
               'smoothing': 10,
               'color': 'black',
               'linewidth': 2}))}),

    ('ping_scaled',
     {'description': 'Ping w/axes scaled to remove outliers',
      'parent': 'ping',
      'scaling': (5,95)}),

    ('ping_cdf',
     {'description': 'Ping CDF plot',
      'type': 'cdf',
      'axis_labels': ['Latency (ms)'],
      'parent': 'ping',
      'cutoff': (DELAY,DELAY)}),

    ('ping_udp_cdf',
     {'description': 'Ping UDP CDF plot',
      'type': 'cdf',
      'axis_labels': ['Latency (ms)'],
      'series': generate_host_series(
          '{} Ping (ms) UDP BE',
          'Ping (ms) UDP BE ({})'),
      'cutoff': (DELAY,DELAY)}),

    ('ping_udp_combine',
     {'description': 'Combined UDP ping plot',
      'parent': 'ping_udp_cdf',
      'type': 'timeseries_combine',
      'group_by': 'groups_points',
      'cutoff': None}),

    ('totals_bandwidth',
     {'description': 'Total bandwidth',
      'type': 'timeseries',
      'series': [{'data': 'TCP download sum',
                  'label': 'Download',
                  'smoothing': 10},
                 {'data': 'TCP upload sum',
                  'label': 'Upload',
                  'smoothing': 10}]}),
    ('totals',
     {'description': 'Total bandwidth and average ping plot',
      'type': 'timeseries',
      'dual_axes': True,
      'axis_labels': [None, 'Latency (ms)'],
      'series': [{'data': 'TCP download sum',
                  'label': 'Download',
                  'smoothing': 10},
                 {'data': 'TCP upload sum',
                  'label': 'Upload',
                  'smoothing': 10},
                 {'data': 'Ping (ms) avg',
                  'label': 'Ping (ms)',
                  'smoothing': 10,
                  'axis': 2}]}),
    ('totals_scaled',
     {'description': 'Total bandwidth and average ping plot (scaled)',
      'parent': 'totals',
      'scaling': (5,95)}),

    ('totals_combine',
     {'description': 'Combined total bandwidth and average ping plot',
      'parent': 'totals',
      'type': 'timeseries_combine',
      'group_by': 'groups_points'}),

    ('all_scaled',
     {'description': 'Download, upload, ping (scaled versions)',
      'type': 'meta',
      'subplots': ('download_scaled', 'upload_scaled', 'ping_scaled')}),

    ('all',
     {'description': 'Download, upload, ping (unscaled versions)',
      'type': 'meta',
      'subplots': ('download', 'upload', 'ping')}),

    ('box_download',
     {'description': 'Download bandwidth box plot',
      'parent': 'download',
      'type': 'box'}),

    ('box_upload',
     {'description': 'Upload bandwidth box plot',
      'parent': 'upload',
      'type': 'box'}),

    ('box_ping',
     {'description': 'Ping box plot',
      'parent': 'ping',
      'type': 'box'}),

    ('box_totals',
     {'description': 'Box plot of totals',
      'parent': 'totals',
      'type': 'box',}),

    ('bar_totals',
     {'description': 'Box plot of totals',
      'parent': 'totals',
      'type': 'bar',}),

    ('box_combine',
     {'description': 'Box plot of averages of several data files.',
      'type': 'box_combine',
      'dual_axes': True,
      'axis_labels': ['Mean TCP goodput (Mbit/s)', 'Mean induced latency (ms)'],
      'cutoff': (DELAY,DELAY),
      'series': [{'data': 'TCP download sum',
                  'label': 'Download',
                  'combine_mode': 'meta:MEAN_VALUE'},
                 {'data': 'TCP upload sum',
                  'label': 'Upload',
                  'combine_mode': 'meta:MEAN_VALUE'},
                 {'data': 'Ping (ms) avg',
                  'label': 'Induced latency (ms)',
                  'combine_mode': 'mean_span',
                  'axis': 2}]}),

    ('bar_combine',
     {'description': 'Bar plot of averages of several data files.',
      'type': 'bar_combine',
      'dual_axes': True,
      'axis_labels': ['Mean TCP goodput (Mbit/s)', 'Mean induced latency (ms)'],
      'cutoff': (DELAY,DELAY),
      'series': [{'data': 'TCP download sum',
                  'label': 'Download',
                  'combine_mode': 'meta:MEAN_VALUE'},
                 {'data': 'TCP upload sum',
                  'label': 'Upload',
                  'combine_mode': 'meta:MEAN_VALUE'},
                 {'data': 'Ping (ms) avg',
                  'label': 'Induced latency (ms)',
                  'combine_mode': 'mean_span',
                  'axis': 2}]}),

    ('qq_icmp',
     {'description': 'Q-Q plot of ICMP pings',
      'type': 'qq',
      'series': [{'data': 'Ping (ms) avg',
                  'label': 'Latency (ms)'},
                 ]}),

    ('qq_download',
     {'description': 'Q-Q plot of total download bandwidth',
      'type': 'qq',
      'series': [{'data': 'TCP download sum',
                  'label': 'Download (Mbps)'},
                 ]}),

    ('qq_upload',
     {'description': 'Q-Q plot of total upload bandwidth',
      'type': 'qq',
      'series': [{'data': 'TCP upload sum',
                  'label': 'Upload (Mbps)'},
                 ]}),
    ('ellipsis',
     {'description': 'Ellipsis plot',
      'type': 'ellipsis',
      'series': [{'data': 'Ping ICMP (ms) avg',
                   'label': 'Latency (avg)'},
                   {'data': 'TCP upload sum',
                  'label': 'Upload (Mbps)'},
                   ]}),
    ('ellipsis_down',
     {'description': 'Ellipsis plot',
      'type': 'ellipsis',
      'series': [ {'data': 'Ping (ms) avg',
                   'label': 'Latency (avg)'},
                   {'data': 'TCP download sum',
                   'label': 'Download (Mbps)'},
                   ]}),
    ('ellipsis_sum',
     {'description': 'Ellipsis plot',
      'type': 'ellipsis',
      'series': [{'data': 'Ping (ms) avg',
                   'label': 'Latency (avg)'},
                 {'data': 'TCP totals',
                  'label': 'Throughput (Mbps)'}
                    ]}),
    ('ellipsis_combine',
     {'description': 'Ellipsis plot of averages of several data files.',
      'type': 'ellipsis_combine',
      'axis_labels': ['Mean induced latency (ms)', 'Mean TCP goodput (Mbit/s)'],
      'series': [{'data': 'Ping (ms) avg',
                  'label': 'Induced latency (ms)',
                  'combine_mode': 'mean_span',
                  'axis': 2},
                  {'data': 'TCP upload sum',
                  'label': 'Upload',
                  'combine_mode': 'meta:MEAN_VALUE'},
                 ]}),
    ('ellipsis_combine_both',
     {'description': 'Ellipsis plot of averages of several data files -- upload *and* download plotted.',
      'type': 'ellipsis_combine',
      'axis_labels': ['Mean induced latency (ms)', 'Mean TCP goodput (Mbit/s)'],
      'series': [{'data': 'Ping (ms) avg',
                  'label': 'Induced latency (ms)',
                  'combine_mode': 'mean_span',
                  'axis': 2},
                  {'data': 'TCP upload sum',
                  'label': 'Upload',
                  'combine_mode': 'meta:MEAN_VALUE'},
                  {'data': 'TCP download sum',
                  'label': 'Download',
                  'combine_mode': 'meta:MEAN_VALUE'},
                 ]}),
    ('cdf_combine',
     {'description': 'CDF plot of averages of several data files.',
      'type': 'cdf_combine',
      'group_by': 'groups_concat',
      'axis_labels': ['Mean induced latency (ms)'],
      'cutoff': (DELAY,DELAY),
      'series': [{'data': 'Ping (ms) avg',
                  'label': 'Induced latency (ms)',
                  'combine_mode': 'span',}
                 ]}),

    ])

include("common.inc")
